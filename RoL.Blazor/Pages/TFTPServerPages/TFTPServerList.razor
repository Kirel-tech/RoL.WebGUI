@page "/Tftps"
@using RoL.Dtos
@using System.Text
@using RoL.Dtos.TFTPDtos
@inject HttpClient Http
@inject IDialogService DialogService

<style>
    div.border-card-toolbar > div > div{
        border-bottom: 1px solid lightgrey;
    }
</style>

<MudTable Bordered="@true" Striped="@true" Dense="@true" @ref="_table" ServerData="@(new Func<TableState, Task<TableData<TftpServerDto>>>(ServerReload))" Breakpoint="Breakpoint.Sm" Hover="true" Loading="@_loading">
    <ToolBarContent>
        <MudText Class="small">Add TFTP</MudText>
        <MudIconButton Class="float-left" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@(() => ShowCreateDialog<TFTPServerCreateDialog>("Create TFTP"))" aria-label="add"></MudIconButton>
        <MudSpacer/>
        <MudTextField T="string" ValueChanged="@(OnSearch)" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Id" T="TftpServerDto">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="CreatedAt" T="TftpServerDto">CreatedAt</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="UpdatedAt" T="TftpServerDto">UpdatedAt</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Address" T="TftpServerDto">Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Port" T="TftpServerDto">Port</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Enabled" T="TftpServerDto">Enabled</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="State" T="TftpServerDto">State</MudTableSortLabel></MudTh>
        <MudTh>Paths</MudTh>
        <MudTh>Options</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="CreatedAt">@context.CreatedAt.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="UpdatedAt">@context.UpdatedAt.ToString("dd/MM/yyyy")</MudTd>
        <MudTd DataLabel="Address">@context.Address</MudTd>
        <MudTd DataLabel="Port">@context.Port</MudTd>
        <MudTd DataLabel="Enabled">
            @if (context.Enabled is false)
            {
                <MudChip Variant="Variant.Outlined">Not enabled</MudChip>
            }
            @if (context.Enabled)
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Success">Enabled</MudChip>
            }
        </MudTd>
        <MudTd DataLabel="State">
            @if (context.State.Contains("error"))
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Error">Error</MudChip>
            }
            @if (context.State.Contains("launched"))
            {
                <MudChip Variant="Variant.Outlined" Color="Color.Success">Launched</MudChip>
            }
            @if (context.State.Contains("stopped"))
            {
                <MudChip Variant="Variant.Outlined">Stopped</MudChip>
            }
        </MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;">
            <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowPaths(context.Id.ToString()))">
                @(_showPaths.GetValueOrDefault(context.Id.ToString())? "Hide" : "Show") Paths
            </MudButton>
        </MudTd>
        <MudTd Style="white-space: nowrap; width: 1%;" DataLabel="Options">
            <MudMenu Label="Options" Size="Size.Small" Dense="true" FullWidth="true" Direction="Direction.Start">
                <MudMenuItem OnClick="@(() => ShowUpdateDialog(context))">Edit</MudMenuItem>
                <MudMenuItem OnClick="@(() => Delete(context.Id))">Delete</MudMenuItem>
            </MudMenu>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
    @if (_showPaths.GetValueOrDefault(context.Id.ToString()))
    {
      <MudTr>
       <td colspan="9">
    	<MudCard Elevation="0">
            <MudCardContent Class="pa-0 border-card-toolbar">
                <MudTable Items="@_tftpPaths[context.Id]" Context="Paths" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="1" HeaderClass="table-head-bordered border-bottom">
                    <ToolBarContent>
                        <MudText Class="small">Add Path </MudText>
                        <MudIconButton Class="float-left" Size="Size.Small" Icon="@Icons.Material.Rounded.Add" Color="Color.Success" OnClick="@(() => ShowPathCreateDialog("Create Path", context.Id))" aria-label="add"></MudIconButton>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Created at</MudTh>
                        <MudTh>Updated at</MudTh>
                        <MudTh>Actual</MudTh>
                        <MudTh>Virtual</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@Paths.Id.</MudTd>
                        <MudTd DataLabel="Created at">@Paths.CreatedAt.ToString("dd/MM/yyyy")</MudTd>
                        <MudTd DataLabel="Updated at">@Paths.UpdatedAt.ToString("dd/MM/yyyy")</MudTd>
                        <MudTd DataLabel="Actual">@Paths.ActualPath.</MudTd>
                        <MudTd DataLabel="Virtual">@Paths.VirtualPath</MudTd>
                        <MudTd>
                            <MudIconButton Size = "Size.Small" Icon="@Icons.Material.Filled.Delete" aria-label="delete" Color="Color.Error" OnClick="@(() => PathDelete(context.Id, Paths.Id))"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudCardContent>
    	</MudCard>
       </td>
      </MudTr>
    }
    	</ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager/>
    </PagerContent>
</MudTable>

@code {
    private string _searchString = "";
    private bool _loading;
    private MudTable<TftpServerDto>? _table;

    private Dictionary<string, bool> _showPaths = new();
    private Dictionary<string, List<TftpPathDto>> _tftpPaths = new();

    private async Task<TableData<TftpServerDto>> ServerReload(TableState? state)
    {
        var uriBuilder = new StringBuilder();

        if (!string.IsNullOrEmpty(state?.SortLabel))
        {
            uriBuilder.Append($"&orderBy={state.SortLabel}");
            uriBuilder.Append(state.SortDirection == SortDirection.Descending ? "&orderDirection=desc" : "&orderDirection=asc");
        }

        if (!string.IsNullOrEmpty(_searchString))
            uriBuilder.Append($"&search={_searchString}");
        
        uriBuilder.Append($"&page={state!.Page + 1}");
        uriBuilder.Append($"&pageSize={state.PageSize}");
        
        var uriSrt = uriBuilder.ToString();
        uriSrt = uriSrt.Remove(0, 1);
        
        var responseTftp = await Http.GetFromJsonAsync<PaginatedItemsDto<List<TftpServerDto>>>("tftp/?" + uriSrt);
        await Task.Run(() =>
        {
            _showPaths.Clear();
            if (responseTftp == null) return;
            foreach (var element in responseTftp.Items)
                _showPaths.Add(element.Id, false);
        });
        
        foreach (var tftp in responseTftp.Items)
        {
            var tftpPaths = await Http.GetFromJsonAsync<PaginatedItemsDto<List<TftpPathDto>>>($"tftp/{tftp.Id}/path/");
            _tftpPaths[tftp.Id] = tftpPaths!.Items;
        }
        return new TableData<TftpServerDto>() {TotalItems = responseTftp.Pagination.TotalCount, Items = responseTftp.Items};
    }
    private void ShowPaths(string id)
    {
        _showPaths[id] = !_showPaths[id];
        foreach (var path in _showPaths.Where(p => p.Key != id))
        {
            _showPaths[path.Key] = false;
        }
    }
    private async void ShowCreateDialog<TComponent>(string title) where TComponent : ComponentBase
    {
        var dialog = DialogService.Show<TComponent>(title);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        if (_table != null) await _table.ReloadServerData();
    }
    private async void ShowPathCreateDialog(string title, string tftpId)
    {
        var parameters = new DialogParameters { ["TftpId"] = tftpId };
        var dialog = DialogService.Show<TFTPPathCreateDialog>(title, parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        if (_table != null) await _table.ReloadServerData();
    }
    private async void Delete(string tftpId)
    {
        var parameters = new DialogParameters {{"EntityName", "delete"}};
        var result = await DialogService.Show<DeleteDialog>("Delete", parameters).Result;
        if (result.Cancelled) return;
        
        await Http.DeleteAsync($"tftp/{tftpId}");
        if (_table != null) await _table.ReloadServerData();
    }
    private async void PathDelete(string tftpId, string pathId)
    {
        var parameters = new DialogParameters {{"EntityName", "delete"}};
        var result = await DialogService.Show<DeleteDialog>("Delete", parameters).Result;
        if (result.Cancelled) return;
        
        await Http.DeleteAsync($"tftp/{tftpId}/path/{pathId}");
        if (_table != null) await _table.ReloadServerData();
    }
    private async void ShowUpdateDialog(TftpServerDto tftpDto)
    {
        var parameters = new DialogParameters { ["Tftp"] = tftpDto };
        var dialog = DialogService.Show<TFTPServerUpdateDialog>("Edit tftp", parameters);
        var result = await dialog.Result;
        if (result.Cancelled) return;
        if (_table != null) await _table.ReloadServerData();
    }
    private void OnSearch(string text)
    {
        _searchString = text;
        _table?.ReloadServerData();
    }
}