@page "/VlanUpdate"
@using RoL.Dtos.HostNetworkDtos
@using System.Text.Json
@using RoL.Dtos
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto pa-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 400px; overflow-y: scroll">
            <b>Address</b>
            @foreach (var address in _addressesItems)
            {
                <MudItem xs="12" Class="d-flex flex-row">
                    <MudTextField Class="mr-1" @bind-Value="@address.Item" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" Class="ma-n1" OnClick="@(() => DeleteAddress(address))"/>
                </MudItem>
            }
            <MudIconButton Class="d-flex flex-row my-n1" Icon="@Icons.Material.Rounded.Add" OnClick="@AddAddress" Color="Color.Success" aria-label="add"></MudIconButton>
            <MudDivider Class="mt-2 mb-1"/>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public HostNetworkVlanDto Vlan { get; set; } = new();
    
    private HostNetworkVlanUpdateDto _vlanPutRequest = new();
    private List<StringItem> _addressesItems = new();

    void Cancel() => MudDialog.Cancel();

    public class StringItem
    {
        public string Item { get; set; } = null!;
    }

    protected override void OnInitialized()
    {
        _vlanPutRequest = new HostNetworkVlanUpdateDto()
        {
            Addresses = Vlan.Addresses,
        };
        foreach (var address in _vlanPutRequest.Addresses)
            _addressesItems.Add(new StringItem {Item = address});
    }
    private void AddAddress()
    {
        _addressesItems.Add(new StringItem() {Item = string.Empty});
    }
    private void DeleteAddress(StringItem address)
    {
        _addressesItems.Remove(address);
    }
    private async void Update()
    {
        _vlanPutRequest.Addresses = new List<string>();
        _vlanPutRequest.Addresses.AddRange(_addressesItems.Select(a => a.Item));
        var response = await Http.PutAsJsonAsync("host/network/vlan/" + Vlan.Name, _vlanPutRequest);
        if (response.IsSuccessStatusCode)
        {
            await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
            Snackbar.Add("Success", Severity.Success, options => options.CloseAfterNavigation = true);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            var validationErrors = JsonSerializer.Deserialize<ValidationErrorDto>(errorContent)!;

            foreach (var error in validationErrors.Errors)
            {
                Snackbar.Add($"{error.Field + ": " + error.Error}", Severity.Error, options => options.CloseAfterNavigation = true);
            }
        }
    }
}