@page "/DHCPLeaseUpdateDialog"
@using RoL.Dtos.DHCPDtos
@using System.Text.Json
@using RoL.Dtos
@inject HttpClient Http
@inject ISnackbar Snackbar

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer xs="12" Class="mx-auto px-4 justify-center my-4 mud-text-align-center" Style="max-height: 700px; width: 600px; overflow-y: scroll">
            <b>IP</b>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_leasePutRequest.Ip" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudDivider Class="mt-2 mb-1"></MudDivider>
            <b>Mac</b>
            <MudItem xs="12">
                <MudTextField Class="my-2" @bind-Value="@_leasePutRequest.Mac" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudItem>
            <MudDivider Class="mt-2 mb-1"></MudDivider>
            <b>Expires</b>
            <MudItem xs="12" Class="d-flex flex-row">
                <MudDatePicker Class="mr-1" @bind-Date="@_expiresCalendarNumber" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                <MudTimePicker Class="mr-1" @bind-Time="_expiresTime" Variant="Variant.Outlined" Margin="Margin.Dense"/>
            </MudItem>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Update">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string DhcpId { get; set; } = "";
    [Parameter]
    public DHCPLeaseDto Lease { get; set; } = new();

    private DHCPLeaseUpdateDto _leasePutRequest = new();
    private DateTime? _expiresCalendarNumber;
    private TimeSpan? _expiresTime;
    
    void Cancel() => MudDialog.Cancel();

    protected override void OnInitialized()
    {
        _leasePutRequest = new DHCPLeaseUpdateDto()
        {
            Ip = Lease.Ip,
            Mac = Lease.Mac
        };
        _expiresCalendarNumber = Lease.Expires.Date;
        _expiresTime = Lease.Expires.TimeOfDay;
    }
    private async void Update()
    {
        if (_expiresCalendarNumber == null && _expiresTime == null)
        {
            Snackbar.Add("ExpiresTime value does not contain the necessary data", Severity.Error, options => options.CloseAfterNavigation = true);
            return;
        }

        var expiresCalendarNumber = (DateTime) _expiresCalendarNumber!;
        var expiresTime = (TimeSpan) _expiresTime!;
        _leasePutRequest.Expires = expiresCalendarNumber.ToUniversalTime().Add(expiresTime);
        
        var responseLease = await Http.PutAsJsonAsync($"dhcp/{DhcpId}/lease/{Lease.Id}", _leasePutRequest);
        if (responseLease.IsSuccessStatusCode)
        {
            Snackbar.Add("Success", Severity.Success, options => options.CloseAfterNavigation = true);
            await Task.Run(() => MudDialog.Close(DialogResult.Ok(true)));
        }
        else
        {
            var errorContent = await responseLease.Content.ReadAsStringAsync();
            var validationErrors = JsonSerializer.Deserialize<ValidationErrorDto>(errorContent)!;
            
            foreach (var error in validationErrors.Errors)
            {
                Snackbar.Add($"{error.Field + ": " + error.Error}", Severity.Error, options => options.CloseAfterNavigation = true);
            }
        }
    }
}